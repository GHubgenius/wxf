#!/usr/bin/env ruby

case RUBY_PLATFORM
when 'java'
else
   print("\e[1;31m[wXf error]\e[0m Please start this application using JRuby\n")
   exit
end

wXfbase = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__
WXFDIR = File.join(File.expand_path(File.dirname(wXfbase)))
$:.unshift(File.join(File.expand_path(File.dirname(wXfbase)), 'jlib'))


#System level requirements
  require 'java'
  require 'rubygems'
  
# Gem requirements
begin
  require 'jdbc/sqlite3'
  require 'buby'
rescue LoadError => le
  print("\e[1;31m[wXf error]\e[0m Please ensure you have the following gems installed:\n")
  print("1) buby\n")
  print("2) jdbc-sqlite3\n")
  exit
end


#wXf gui elements
require 'wXfgui/base'
require 'wXfgui/analysis'
require 'wXfgui/buby'
require 'wXfgui/console'
require 'wXfgui/sca'
require 'wXfgui/database'
require 'wXfgui/decision_tree'
require 'wXfgui/main'
require 'wXfgui/modules_factory'
require 'wXfgui/workspace'

# Time to require native wXf stuff
require 'wXf/wXfassists'
require 'wXf/wXfconductors'
require 'wXf/wXfdb'
require 'wXf/wXfconstants'
require 'wXf/wXflog'
require 'wXf/wXfmod_factory'
require 'wXf/wXfui'
require 'wXf/wXfwebserver'


# Necessary libs, well, most of them......
import java.util.LinkedList
import java.util.Properties
import javax.swing.JTree
import javax.swing.tree.DefaultMutableTreeNode
import javax.swing.tree.TreeModel
import java.awt.Dimension
import java.awt.Color
import java.awt.Font
import javax.swing.BorderFactory
import javax.swing.SwingConstants
import javax.swing.JFrame
import javax.swing.JLabel
import javax.swing.JTextArea
import javax.swing.JComponent
import javax.swing.JList
import javax.swing.JPanel
import javax.swing.JMenuBar
import javax.swing.JScrollPane
import javax.swing.JTabbedPane
import javax.swing.GroupLayout
import java.awt.event.MouseListener
import java.awt.event.FocusListener
import java.awt.event.MouseEvent
import java.awt.event.WindowEvent

module WxfGui
class WxfGuiTabbedPane < JTabbedPane
  
  attr_accessor :wXf_main_panel, :wXf_analysis_panel, :wXf_buby_panel, :wXf_console_pane, :wXf_sca_panel
    
  def initialize(wXfgui)
    @wXfgui = wXfgui
    super(JTabbedPane::TOP, JTabbedPane::SCROLL_TAB_LAYOUT)
    self.wXf_main_panel = WxfMainPanel.new
    self.wXf_analysis_panel = WxfAnalysisPanel.new(@wXfgui)
    self.wXf_buby_panel = WxfBubyPanel.new  
    self.wXf_console_pane = WxfConsolePanel.new
    self.wXf_sca_panel = WxfScaPanel.new
    add("Main", wXf_main_panel)
    add("Analysis", wXf_analysis_panel)
    add("Buby", wXf_buby_panel)
    add("SCA", wXf_sca_panel)
    add("Console", wXf_console_pane)
    listener
  end
  
  def add(*vals)
    name, obj = vals
    self.add_tab(name, obj)
  end
  
  def listener(*params)
    self.add_change_listener do |event|
    #=begin
    #THIS IS ALL STUBBED CODE, USING IT AS AN EXAMPLE.
  
    end
    #=end 
  end
  
  def restore
    self.wXf_main_panel.restore
    self.wXf_sca_panel.restore
  end
  
  def send_log_text(*params)
    self.wXf_main_panel.send_log_text(*params)
  end
  
end



class WxfMainPanel < JPanel
  
   include MouseListener
   attr_accessor :decision_panel
   
  def initialize
    super()
    init
  end
  
  def init

      @main_tabs = MainTabs.new
      
      
      #
      # SCROLL PANE
      #
      
      treeModel = ModulesTree.new(ModulesLoader.new)
    
      tree_1 = JTree.new(treeModel)
      tree_1.shows_root_handles = true
      tree_1.addMouseListener(ModulesPopUpClickListener.new(tree_1, self))
      t_scroll_pane_1 = JScrollPane.new(tree_1)
      self.decision_panel = DecisionPanel.new
      
      #
      # SPLIT PANES  
      #
      
           
      split_pane1 = JSplitPane.new JSplitPane::VERTICAL_SPLIT
      split_pane1.setDividerLocation 390
      split_pane1.add self.decision_panel
      split_pane1.add @main_tabs
        
      
      split_pane2 = JSplitPane.new JSplitPane::HORIZONTAL_SPLIT
      split_pane2.setDividerLocation 300
      split_pane2.add t_scroll_pane_1
      split_pane2.add split_pane1
      
      
      #
      # GROUP LAYOUT OPTIONS
      #
      
      layout = GroupLayout.new self
      # Add Group Layout to the frame
      self.setLayout layout
      # Create sensible gaps in components (like buttons)
      layout.setAutoCreateGaps true
      layout.setAutoCreateContainerGaps true
    
      sh1 = layout.createSequentialGroup
      sv1 = layout.createSequentialGroup
      p1 = layout.createParallelGroup
      p2 = layout.createParallelGroup
      
      layout.setHorizontalGroup sh1
      layout.setVerticalGroup sv1
    
      sh1.addComponent split_pane2
      sh1.addGroup p1
       
      p2.addComponent split_pane2
      sv1.addGroup p2
      
  end
  
  def restore
    @main_tabs.restore
  end
  
  def selected_list
    return decision_panel.selected_list
  end
  
  def gray_out
    decision_panel.gray_out
  end
  
  def undo_gray_out
    decision_panel.undo_gray_out
  end
  
  def send_log_text(*params)
    @main_tabs.send_log_text(*params)
  end
end

# 
# MAIN FRAME
#
class Wxfgui < JFrame
  
  attr_accessor :wXf_gui_tabbed_pane, :base
  
  def initialize(base)
      self.base = base
      super "The Web Exploitation Framework"
      init_classes
      check_workspace
  end
  
  def init_classes
     self.wXf_gui_tabbed_pane = WxfGuiTabbedPane.new(self)
  end
  
    
  def initUI
      self.base.initialized = true
      self.add self.wXf_gui_tabbed_pane
      
      #
      # Menu Bar Items
      #
      
      @jmenubar  = JMenuBar.new
      @wxfmenu   = WxfMenu.new(self)
      @bubymenu  = BubyMenu.new
      @aboutmenu = AboutMenu.new
      
      menuBar  =  @jmenubar
      menuBar.add @wxfmenu
      menuBar.add @bubymenu
      menuBar.add @aboutmenu
            
      #
      # FRAME OPTIONS
      #
      
      self.addWindowListener do |e|
       if e.kind_of?(WindowEvent)
        ps = e.paramString.split(',')[0] == "WINDOW_CLOSING" ? true : false
        if (ps)
          close_it
        end        
       end
      end
      
      # Set the overall side of the frame
      self.setJMenuBar menuBar
      self.setPreferredSize Dimension.new(1300, 900)
      self.pack
    
      self.setDefaultCloseOperation JFrame::DO_NOTHING_ON_CLOSE
      self.setLocationRelativeTo nil
      self.setVisible true
  end
  
  def restore
    self.wXf_gui_tabbed_pane.restore
  end
  
  def send_log_text(*params)
    self.wXf_gui_tabbed_pane.send_log_text(*params)
  end
  
  def check_workspace
    
      pwd = Dir.pwd
      db_exists = false
  
      Dir.foreach(WXf::WXF_HOME_DIR) do |f|
        if File.extname(f) == ".db"
            db_exists = true
          next
        end
      end
  
      if db_exists == true
        WorkspaceChooser.new(self)
      else
        WorkspaceCreator.new(self)     
      end   
  end
  
  def close_it
    jo = JOptionPane.showConfirmDialog(nil, 
           "Are you sure that you'd like to exit wXf?", 
           "Confirmation", 
           javax.swing.JOptionPane::YES_NO_OPTION, 
           javax.swing.JOptionPane::QUESTION_MESSAGE)
    if jo == JOptionPane::YES_OPTION
      java.lang.System.exit 0 
    end
  end

  def stop_dt
        base.remove_all_selected_dt
        wXf_gui_tabbed_pane.wXf_analysis_panel.unload_dt_tree
        # Undo gray out selected items
        wXf_gui_tabbed_pane.wXf_main_panel.undo_gray_out
        # Undo gray out start decision tree
        @wxfmenu.enable("start decision tree")
        @wxfmenu.disable("stop decision tree")
        self.repaint()
  end 
  
  def start_dt
     # Gotta find a better abstraction, in the meantime...
     dt_sel = wXf_gui_tabbed_pane.wXf_main_panel.selected_list
     if not dt_sel.empty?
        base.add_all_selected_dt(dt_sel)
        # Add something to the top of the activity stack
        mod = base.hash_value_at(0, dt_sel)
        base.add_decision_tree_activity(mod)
        # Gray out selected items
        wXf_gui_tabbed_pane.wXf_analysis_panel.load_dt_tree
        wXf_gui_tabbed_pane.wXf_main_panel.gray_out
        # Gray out start decision tree
        @wxfmenu.disable("start decision tree")
        @wxfmenu.enable("stop decision tree")
        self.repaint()
     end
  end
  
end


end

WxfGui::Base.new
