module WXf
module WXfconductors

class Create_Exploit_Conductor
    
    attr_accessor :options, :desc
    
    def initialize(control)
      self.options = {
        'NAME'   => "exploit",
        'DESC'   => "description",
        'TYPE'   => "XSS",
        'LANG'   => "JSP",
        'METHOD' => "GET",
        'URL'    => "http://127.0.0.1:8080/path/index.html",
        'HEADERS'=> "",
        'PARAMS' => '{ "param1" => "value1", "param2" => "<#>PAYLOAD<%>", "optional" => "<#>VALUE<%>" }',
        'VALUES' => '{ :required => { "RURL"=>"http://127.0.0.1:8080/path/index.html" }, :optional => { "VALUE"=> "value" }'
      }
      self.desc = {
              'NAME'   => "name of the exploit",
              'DESC'   => "full description",
              'TYPE'   => "type of web exploit (RFI/XSS/CSRF)",
              'LANG'   => "language (PHP/JSP/ASP)",
              'METHOD' => "http method used in exploit (GET/POST/PUT)",
              'URL'    => "url where vulnerability exists, used only for description",
              'HEADERS'=> "any required http headers (*not yet implemented)",
              'PARAMS' => 'parameters to append to the URL or in the POST body defined as a ruby hash, use <#>VAR<%> for variable options',
              'VALUES' => 'required and optional variables defined as a ruby hash, any <#>VAR<%> values must be defined in this hash'
      }
    end
    
    def type
     CREATE_EXPLOIT
    end
    
    def dis_opts
      # Display the commands
      tbl = WXf::WXfui::Console::Prints::PrintTable.new(
      'Justify'  => 4,             
      'Columns' => 
      [
      'Name',
      'Current Setting'
      ])
      self.options.each { |k,v|
      tbl.add_ritems([k,v.to_s])
      }
      tbl.prnt
    end
    
    def usage
      $stderr.puts("\n"+"DB Exploit options:")
      dis_opts  
    end
    

    
  end
  
end end  