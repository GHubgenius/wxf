#
# Class used to call the db, create an instance of an exploit and run
#


module WXf
module WXfconductors
  
  class Db_Exploit_Conductor
    
    attr_accessor :exp, :pay, :svr
    
    def initialize(name)          
      self.exp  = WXf::WXfdb::Exploit.new(exploit_call("#{name}")[0])      
      self.pay = nil          
    end
    
    
    #
    # Defines the type of module
    #
    def type
     DB_EXP
    end
    
    
    #
    # Need to build this out so that we can grab the attr from 
    # ...the module called and update the prompt with it.
    #
    def name   
    end  
    
    #
    # Gives and instance from which to interace with the core class
    #
    def wxf    
      WXf::WXfdb::Core.new(WXFDIR,1)
    end  
    
    
    #
    # Exploit call to the exploits portion of the db
    #
    def exploit_call(args)       
       wxf.db.get_exploit_by_name(args)        
     end
   
     
    #
    # Run that bad-boy
    #     
    def run_exploit (control)      
      # Keeps us from trying to merge options on an object that doesn't exist      
      unless self.pay == nil        
        # Merging of options is a necessary evil        
        self.pay.options.merge!(self.pay.required).merge!(self.pay.optional)      
        self.exp.options.merge!(self.exp.required).merge!(self.exp.optional)
               
        #This actually runs the db based exploit
        wxf.run_exploit(self.exp, self.pay, control)           
      else        
           print("Don't forget to choose a payload!" + "\n")
      end
    end
    
  end
  
end
end